rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() &&
        request.auth.token.email in ['emmanuelfabiani23@gmail.com'];
    }

    function isCommentOwner() {
      return isAuthenticated() &&
        request.auth.uid == resource.data.userId;
    }

    function isValidComment() {
      let data = request.resource.data;
      return data.keys().hasAll(['content', 'postId', 'userId', 'author', 'createdAt', 'updatedAt']) &&
        data.content is string &&
        data.content.size() > 0 &&
        data.postId is string &&
        data.userId == request.auth.uid &&
        data.author.name is string &&
        data.author.image is string;
    }

    // Blog posts collection
    match /blog_posts/{postId} {
      // Anyone can list and read published posts
      allow list, get: if 
        // For admin, allow all
        isAdmin() ||
        // For others, only if published
        resource.data.published == true;
      
      // Only admin can create, update, delete
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || 
        // Allow increment/decrement of upvotes
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes']));
    }

    // Comments collection
    match /comments/{commentId} {
      // Anyone can read comments
      allow read: if true;
      
      // Only authenticated users can create valid comments
      allow create: if isAuthenticated() &&
        isValidComment();
      
      // Only comment owner or admin can update/delete
      allow update, delete: if isCommentOwner() || isAdmin();
    }

    // Post upvotes collection
    match /post_upvotes/{upvoteId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create if authenticated and data is valid
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      
      // Allow delete if user owns the upvote
      allow delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }
  }
}
